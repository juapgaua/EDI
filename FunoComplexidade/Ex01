//Apresente a função de complexidade (no pior e melhor caso e no caso médio) para os programas
abaixo, fazendo as considerações que considerar pertinente.

int Max(int A[n]){
 int i, Temp;
 Temp = A[0];
 for (i = 1; i < n; i++)
 if (Temp < A[i])
 Temp = A[i];
 return Temp;
}

/*
Pior Caso:
No pior caso, o algoritmo precisa percorrer todo o array para encontrar o valor máximo. 
Isso ocorre quando o maior valor está na última posição do array ou não está presente no array. 
Portanto, o número de comparações é igual a n - 1. A complexidade de tempo no pior caso é O(n) - linear.

Melhor Caso:
No melhor caso, o algoritmo encontra o valor máximo logo na primeira comparação, quando Temp é inicializado com A[0]. 
Portanto, o número de comparações é igual a 1. A complexidade de tempo no melhor caso é O(1) - constante.

Caso Médio:
O caso médio depende da distribuição dos valores no array. 
Se assumirmos que os valores são distribuídos aleatoriamente, podemos esperar que, em média, o algoritmo 
percorra aproximadamente metade do array antes de encontrar o valor máximo. Portanto, a complexidade de tempo no caso médio também é O(n) - linear.
*/
