void FazAlgo(int n){
 int i,j,k;
 x = 0;
 for(i = 1 ; i <= n - 1 ; i++){
 for(j = i + 1 ; j <= n ; j++)
 for(k = 1 ; k <= j ; k++)
 x = x + 1;
 }
}
/*
A função FazAlgo possui três loops aninhados e realiza uma série de iterações.

Pior Caso, Caso Medio, Melhor Caso:  
  v  Todos os loops são executados o número máximo de vezes possível.
    O primeiro loop vai de 1 a n - 1, o que significa que ele executa n - 1 vezes.
    O segundo loop vai de i + 1 a n, onde i varia de 1 a n - 1. 
      No pior caso, quando i é igual a n - 1, o segundo loop executa n - (n - 1 + 1) vezes, ou seja, uma vez.
    O terceiro loop vai de 1 a j, onde j varia de i + 1 a n. No pior caso, quando i é igual a n - 1, 
      o terceiro loop executa n - (n - 1 + 1) vezes, ou seja, uma vez também.

Portanto, o número total de iterações é a multiplicação do número de iterações em cada loop:
Iterações = (n - 1) * 1 * 1 = n - 1

A complexidade de tempo é a mesma para todos os casos: pior caso, melhor caso e caso médio. 
Isso ocorre porque a função possui loops aninhados, e o número de iterações é diretamente proporcional ao valor de n.

Assim, a função FazAlgo tem uma complexidade de tempo de O(n), ou seja, linear em relação ao tamanho da entrada, 
independentemente de qual seja o cenário (melhor caso, pior caso ou caso médio). 
Não há variação na complexidade de acordo com diferentes situações, pois todos os loops são executados um número fixo de vezes 
em relação a n.
*/
