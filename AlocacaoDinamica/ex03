/*3) Faça uma função que receba um valor n e crie dinamicamente um vetor de n elementos e retorne
um ponteiro. Crie uma função que receba um ponteiro para um vetor e um valor n e imprima os n
elementos desse vetor. Construa também uma função que receba um ponteiro para um vetor e
libere esta área de memória. Ao final, crie uma função principal que leia um valor n e chame a
função criada acima. Depois, a função principal deve ler os n elementos desse vetor. Então, a
função principal deve chamar a função de impressão dos n elementos do vetor criado e, finalmente,
liberara memória alocada através da função criada para liberação.
Desenvolvido por Juliana Apgaua Sant'Ana Vidigal
24.09.23
*/

#include <stdio.h>
#include <stdlib.h>

// Função para criar dinamicamente um vetor de n elementos e retornar um ponteiro
int* criarVetor(int n) {
    int* vetor = (int*)malloc(n * sizeof(int));
    if(vetor == NULL){
        printf("\nERRO na alocação de memória");
        exit(1);
    }
    return vetor;
}


// Função para imprimir os n elementos de um vetor
void imprimirVetor(int* vetor, int n) {
    printf("Elementos do vetor:\n");
    for (int i = 0; i < n; i++) {
        printf("%d ", vetor[i]);
    }
    printf("\n");
}

// Função para liberar a memória alocada para o vetor
void liberarVetor(int* vetor) {
    free(vetor);
}

int main() {
    int n;

    // Solicita ao usuário o valor de n
    printf("Digite o tamanho do vertor: ");
    scanf("%d", &n);

    // Chama a função para criar o vetor dinamicamente
    int* vetor = criarVetor(n);

    // Solicita ao usuário os elementos do vetor
    printf("Digite os %d elementos do vetor:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &vetor[i]);
    }

    // Chama a função para imprimir os elementos do vetor
    imprimirVetor(vetor, n);

    // Chama a função para liberar a memória alocada
    liberarVetor(vetor);

    return 0;
}

