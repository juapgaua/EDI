/*
Criar uma estrutura , contendo nome, data de nascimento e CPF. Crie uma variável que é um
ponteiro para esta estrutura (no programa principal). Depois crie uma função que receba este
ponteiro e preencha os dados da estrutura e também uma uma função que receba este ponteiro e
imprima os dados da estrutura. Finalmente, faça a chamada a esta função na função principal.
As funçoes foram construidas usando referencia
Realizada alocação de memoria para a struct.
*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Definição da estrutura com typedef
typedef struct {
    char *nome[50];
    char *dataNascimento[11];
    char *cpf[12];
} TPessoa;

// Protótipos das funções
void preencherDados(TPessoa *pessoa);
void imprimirDados(const TPessoa *pessoa);
void liberarMemoria(TPessoa *pessoa);
void retiraEnter(char *s);

int main() {
    // Criação de uma variável ponteiro para o tipo Pessoa
    TPessoa *ponteiroPessoa = NULL;

    // Aloca memória inicial para a estrutura
    ponteiroPessoa = (TPessoa *)malloc(sizeof(TPessoa));

    if (ponteiroPessoa == NULL) {
        printf("Erro na alocação de memória.\n");
        return 1;
    }

    // Chama a função para preencher os dados da estrutura
    preencherDados(ponteiroPessoa);

    // Chama a função para imprimir os dados da estrutura
    imprimirDados(ponteiroPessoa);

    // Libera a memória alocada
    liberarMemoria(ponteiroPessoa);

    return 0;
}

// Função para preencher os dados da estrutura
void preencherDados(TPessoa *pessoa) {
    printf("Digite o nome: ");
    fgets(pessoa->nome, 50, stdin);
    retiraEnter(pessoa->nome);

    printf("Digite a data de nascimento (dd/mm/aaaa): ");
    fgets(pessoa->dataNascimento, 11, stdin);
    retiraEnter(pessoa->dataNascimento);

    printf("Digite o CPF (xxx.xxx.xxx-xx): ");
    fgets(pessoa->cpf, 12, stdin);
    retiraEnter(pessoa->cpf);

    //limpa o buffer de entrada
    int c;
    while((c=getchar())!='\n' && c!=EOF);
}

// Função para imprimir os dados da estrutura
void imprimirDados(const TPessoa *pessoa) {
    printf("\nDados da Pessoa:\n");
    printf("Nome: %s\n", pessoa->nome);
    printf("Data de Nascimento: %s\n", pessoa->dataNascimento);
    printf("CPF: %s\n", pessoa->cpf);
}

// Função para liberar a memória alocada
void liberarMemoria(TPessoa *pessoa) {
    free(pessoa);
}

// Função para remover a quebra de linha de uma string
void retiraEnter(char *s) {
    if (s[strlen(s)-1]=='\n')
        s[strlen(s)-1]='\0';// Substitui a quebra de linha por um caractere nulo
}
